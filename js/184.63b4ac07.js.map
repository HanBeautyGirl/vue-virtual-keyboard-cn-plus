{"version":3,"file":"js/184.63b4ac07.js","mappings":"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","sources":["webpack://vue-virtual-keyboard-cn/./src/components/keyboard/index.worker.js"],"sourcesContent":["// const obj = self.importScripts(\"/vocabulary.js\")\r\n\r\nself.addEventListener('message', (e) => {\r\n    // console.log('子线程', e)\r\n\r\n    const { method, dataKey } = e.data\r\n\r\n    if (method === 'init') {\r\n        self[dataKey] = Object.freeze(e.data.data)\r\n        self.dataKey = dataKey\r\n    }\r\n    if (method === 'setCn_input') {\r\n        setCn_input(e)\r\n    }\r\n    if (method === 'search') {\r\n        console.time(\"searchDict\");\r\n        let { key } = e.data\r\n        const doubleSpell = self.doubleSpell || {}\r\n\r\n        let cn_input = key\r\n        let keys = cn_input.split(\"'\")\r\n        const dict = doubleSpell[cn_input.charAt(0)]\r\n        if (!dict) return\r\n\r\n        if ([\"an\"].includes(keys[keys.length - 1])) {\r\n            let tempStr = keys[keys.length - 2];\r\n            if ([\"n\"].includes(tempStr.charAt(tempStr.length - 1))) {\r\n                let newTempStr = tempStr.slice(0, tempStr.length - 1);\r\n                keys = [\r\n                    newTempStr,\r\n                    tempStr.slice(tempStr.length - 1) + keys[keys.length - 1],\r\n                ];\r\n                cn_input = keys.join(\"'\");\r\n            }\r\n        }\r\n\r\n        let keyResult = Object.keys(dict).filter((key) => {\r\n            const keys = key.split(\"'\");\r\n            const cn_inputList = cn_input.split(\"'\");\r\n            const isLen = cn_inputList.length === keys.length;\r\n            if (!isLen) return\r\n            let result = true\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i].charAt(0) != cn_inputList[i].charAt(0)) {\r\n                    result = false\r\n                } else {\r\n                    const keyItemList = keys[i].split('')\r\n                    const strList = cn_inputList[i].split('')\r\n                    for (let j = 0; j < strList.length; j++) {\r\n                        if (!strList[j]) break\r\n                        if (keyItemList[j] != strList[j]) {\r\n                            result = false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (result && isLen) {\r\n                return dict[key];\r\n            }\r\n        });\r\n\r\n\r\n        let strList = [];\r\n        let singleDictList = []\r\n        const singleDict = self.dict\r\n        for (let key of keyResult) {\r\n            let keyList = key.split(\"'\")\r\n            // console.log('dict[key]', dict[key])\r\n            strList.push(dict[key].split(\",\"));\r\n            for (let item of keyList) {\r\n                // console.log('singleDict[item]', singleDict[item])\r\n                if (singleDict[item]) {\r\n                    singleDictList.push(singleDict[item].split(\"\"));\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        singleDictList = Array.from(new Set(singleDictList.flat(2)))\r\n        strList = strList\r\n            .flat(2)\r\n            .sort((a, b) => {\r\n                if (b.length > a.length) return -1;\r\n            })\r\n            .reverse();\r\n        const result = strList.concat(singleDictList)\r\n        console.timeEnd(\"searchDict\");\r\n        self.postMessage({ method: 'search', data: result, cn_input });\r\n    }\r\n\r\n}, false);\r\n\r\nconst setCn_input = function (e) {\r\n    let { cn_input, text } = e.data\r\n    const singleDict = self.dict\r\n    let itemList = []\r\n    for (let key in singleDict) {\r\n        let value = singleDict[key]\r\n        let valueList = value.split('')\r\n        let item = valueList.find(item => item === text)\r\n        if (item) {\r\n            itemList.push(key)\r\n        }\r\n    }\r\n    let str = ''\r\n    const cn_inputList = cn_input.split(\"'\")\r\n    for (let i = 0; i < cn_inputList.length; i++) {\r\n        let item = cn_inputList[i]\r\n        for (let key of itemList) {\r\n            let list = key.split('')\r\n            for (let k = 0; k < list.length; k++) {\r\n                if (key.charAt(k) === item.charAt(k)) {\r\n                    str = item\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let result = cn_inputList.filter(item => item != str).join(\"'\")\r\n\r\n    self.postMessage({ method: 'setCn_input', cn_input: result });\r\n}\r\n\r\n// const findInitialCn = function (cn_input, data) {\r\n//     console.time(\"for2\");\r\n//     let strList = [];\r\n//     let count = 0\r\n//     Object.keys(data).filter((key) => {\r\n//         const keys = key.split(\"'\");\r\n//         let i = 0;\r\n//         const bool = keys.every((item, index) => {\r\n//             ++count\r\n//             if (index === 0) {\r\n//                 if (item.charAt(0) === cn_input.charAt(0)) {\r\n//                     return true;\r\n//                 }\r\n\r\n//             } else {\r\n//                 i += 2;\r\n//                 if (item.charAt() === cn_input.charAt(i)) return true;\r\n//             }\r\n//         });\r\n//         if (bool) {\r\n//             strList.push(data[key]);\r\n//         }\r\n\r\n//     });\r\n//     console.log('count', count, strList)\r\n//     console.timeEnd(\"for2\");\r\n//     let keys = cn_input.split(\"'\")\r\n//     strList = strList.filter(item => item.length === keys.length);\r\n\r\n//     return strList\r\n\r\n// }"],"names":["self","addEventListener","e","method","dataKey","data","Object","freeze","setCn_input","console","time","key","doubleSpell","cn_input","keys","split","dict","charAt","includes","length","tempStr","newTempStr","slice","join","keyResult","filter","cn_inputList","isLen","result","i","keyItemList","strList","j","singleDictList","singleDict","keyList","push","item","Array","from","Set","flat","sort","a","b","reverse","concat","timeEnd","postMessage","text","itemList","value","valueList","find","str","list","k"],"sourceRoot":""}